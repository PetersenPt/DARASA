//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class GameEnterpriseAdvertAppearance: APIModel {

    public var dateShown: DateTime?

    public var enterpriseAdvert: EnterpriseAdvert?

    public var enterpriseAdvertId: Int?

    public var game: Game?

    public var gameEnterpriseAdvert: GameEnterpriseAdvert?

    public var gameEnterpriseAdvertAppearanceId: Int?

    public var gameEnterpriseAdvertId: Int?

    public var gameId: Int?

    public init(dateShown: DateTime? = nil, enterpriseAdvert: EnterpriseAdvert? = nil, enterpriseAdvertId: Int? = nil, game: Game? = nil, gameEnterpriseAdvert: GameEnterpriseAdvert? = nil, gameEnterpriseAdvertAppearanceId: Int? = nil, gameEnterpriseAdvertId: Int? = nil, gameId: Int? = nil) {
        self.dateShown = dateShown
        self.enterpriseAdvert = enterpriseAdvert
        self.enterpriseAdvertId = enterpriseAdvertId
        self.game = game
        self.gameEnterpriseAdvert = gameEnterpriseAdvert
        self.gameEnterpriseAdvertAppearanceId = gameEnterpriseAdvertAppearanceId
        self.gameEnterpriseAdvertId = gameEnterpriseAdvertId
        self.gameId = gameId
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        dateShown = try container.decodeIfPresent("dateShown")
        enterpriseAdvert = try container.decodeIfPresent("enterpriseAdvert")
        enterpriseAdvertId = try container.decodeIfPresent("enterpriseAdvertId")
        game = try container.decodeIfPresent("game")
        gameEnterpriseAdvert = try container.decodeIfPresent("gameEnterpriseAdvert")
        gameEnterpriseAdvertAppearanceId = try container.decodeIfPresent("gameEnterpriseAdvertAppearanceId")
        gameEnterpriseAdvertId = try container.decodeIfPresent("gameEnterpriseAdvertId")
        gameId = try container.decodeIfPresent("gameId")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(dateShown, forKey: "dateShown")
        try container.encodeIfPresent(enterpriseAdvert, forKey: "enterpriseAdvert")
        try container.encodeIfPresent(enterpriseAdvertId, forKey: "enterpriseAdvertId")
        try container.encodeIfPresent(game, forKey: "game")
        try container.encodeIfPresent(gameEnterpriseAdvert, forKey: "gameEnterpriseAdvert")
        try container.encodeIfPresent(gameEnterpriseAdvertAppearanceId, forKey: "gameEnterpriseAdvertAppearanceId")
        try container.encodeIfPresent(gameEnterpriseAdvertId, forKey: "gameEnterpriseAdvertId")
        try container.encodeIfPresent(gameId, forKey: "gameId")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? GameEnterpriseAdvertAppearance else { return false }
      guard self.dateShown == object.dateShown else { return false }
      guard self.enterpriseAdvert == object.enterpriseAdvert else { return false }
      guard self.enterpriseAdvertId == object.enterpriseAdvertId else { return false }
      guard self.game == object.game else { return false }
      guard self.gameEnterpriseAdvert == object.gameEnterpriseAdvert else { return false }
      guard self.gameEnterpriseAdvertAppearanceId == object.gameEnterpriseAdvertAppearanceId else { return false }
      guard self.gameEnterpriseAdvertId == object.gameEnterpriseAdvertId else { return false }
      guard self.gameId == object.gameId else { return false }
      return true
    }

    public static func == (lhs: GameEnterpriseAdvertAppearance, rhs: GameEnterpriseAdvertAppearance) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
