//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class User: APIModel {

    public var casa: CASA?

    public var casaId: Int?

    public var enterprise: Enterprise?

    public var enterpriseId: Int?

    public var gameCompany: GameCompany?

    public var gameCompanyId: Int?

    public var name: String?

    public var userId: Int?

    public var username: String?

    public init(casa: CASA? = nil, casaId: Int? = nil, enterprise: Enterprise? = nil, enterpriseId: Int? = nil, gameCompany: GameCompany? = nil, gameCompanyId: Int? = nil, name: String? = nil, userId: Int? = nil, username: String? = nil) {
        self.casa = casa
        self.casaId = casaId
        self.enterprise = enterprise
        self.enterpriseId = enterpriseId
        self.gameCompany = gameCompany
        self.gameCompanyId = gameCompanyId
        self.name = name
        self.userId = userId
        self.username = username
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        casa = try container.decodeIfPresent("casa")
        casaId = try container.decodeIfPresent("casaId")
        enterprise = try container.decodeIfPresent("enterprise")
        enterpriseId = try container.decodeIfPresent("enterpriseId")
        gameCompany = try container.decodeIfPresent("gameCompany")
        gameCompanyId = try container.decodeIfPresent("gameCompanyId")
        name = try container.decodeIfPresent("name")
        userId = try container.decodeIfPresent("userId")
        username = try container.decodeIfPresent("username")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(casa, forKey: "casa")
        try container.encodeIfPresent(casaId, forKey: "casaId")
        try container.encodeIfPresent(enterprise, forKey: "enterprise")
        try container.encodeIfPresent(enterpriseId, forKey: "enterpriseId")
        try container.encodeIfPresent(gameCompany, forKey: "gameCompany")
        try container.encodeIfPresent(gameCompanyId, forKey: "gameCompanyId")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(userId, forKey: "userId")
        try container.encodeIfPresent(username, forKey: "username")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? User else { return false }
      guard self.casa == object.casa else { return false }
      guard self.casaId == object.casaId else { return false }
      guard self.enterprise == object.enterprise else { return false }
      guard self.enterpriseId == object.enterpriseId else { return false }
      guard self.gameCompany == object.gameCompany else { return false }
      guard self.gameCompanyId == object.gameCompanyId else { return false }
      guard self.name == object.name else { return false }
      guard self.userId == object.userId else { return false }
      guard self.username == object.username else { return false }
      return true
    }

    public static func == (lhs: User, rhs: User) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
