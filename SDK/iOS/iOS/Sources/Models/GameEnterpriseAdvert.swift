//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class GameEnterpriseAdvert: APIModel {

    public var advertImage: File?

    public var casaAdvert: CASAAdvert?

    public var casaAdvertId: Int?

    public var date: DateTime?

    public var enterpriseAdvert: EnterpriseAdvert?

    public var enterpriseAdvertId: Int?

    public var game: Game?

    public var gameEnterpriseAdvertId: Int?

    public var gameId: Int?

    public var rank: Int?

    public init(advertImage: File? = nil, casaAdvert: CASAAdvert? = nil, casaAdvertId: Int? = nil, date: DateTime? = nil, enterpriseAdvert: EnterpriseAdvert? = nil, enterpriseAdvertId: Int? = nil, game: Game? = nil, gameEnterpriseAdvertId: Int? = nil, gameId: Int? = nil, rank: Int? = nil) {
        self.advertImage = advertImage
        self.casaAdvert = casaAdvert
        self.casaAdvertId = casaAdvertId
        self.date = date
        self.enterpriseAdvert = enterpriseAdvert
        self.enterpriseAdvertId = enterpriseAdvertId
        self.game = game
        self.gameEnterpriseAdvertId = gameEnterpriseAdvertId
        self.gameId = gameId
        self.rank = rank
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        advertImage = try container.decodeIfPresent("advertImage")
        casaAdvert = try container.decodeIfPresent("casaAdvert")
        casaAdvertId = try container.decodeIfPresent("casaAdvertId")
        date = try container.decodeIfPresent("date")
        enterpriseAdvert = try container.decodeIfPresent("enterpriseAdvert")
        enterpriseAdvertId = try container.decodeIfPresent("enterpriseAdvertId")
        game = try container.decodeIfPresent("game")
        gameEnterpriseAdvertId = try container.decodeIfPresent("gameEnterpriseAdvertId")
        gameId = try container.decodeIfPresent("gameId")
        rank = try container.decodeIfPresent("rank")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(advertImage, forKey: "advertImage")
        try container.encodeIfPresent(casaAdvert, forKey: "casaAdvert")
        try container.encodeIfPresent(casaAdvertId, forKey: "casaAdvertId")
        try container.encodeIfPresent(date, forKey: "date")
        try container.encodeIfPresent(enterpriseAdvert, forKey: "enterpriseAdvert")
        try container.encodeIfPresent(enterpriseAdvertId, forKey: "enterpriseAdvertId")
        try container.encodeIfPresent(game, forKey: "game")
        try container.encodeIfPresent(gameEnterpriseAdvertId, forKey: "gameEnterpriseAdvertId")
        try container.encodeIfPresent(gameId, forKey: "gameId")
        try container.encodeIfPresent(rank, forKey: "rank")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? GameEnterpriseAdvert else { return false }
      guard self.advertImage == object.advertImage else { return false }
      guard self.casaAdvert == object.casaAdvert else { return false }
      guard self.casaAdvertId == object.casaAdvertId else { return false }
      guard self.date == object.date else { return false }
      guard self.enterpriseAdvert == object.enterpriseAdvert else { return false }
      guard self.enterpriseAdvertId == object.enterpriseAdvertId else { return false }
      guard self.game == object.game else { return false }
      guard self.gameEnterpriseAdvertId == object.gameEnterpriseAdvertId else { return false }
      guard self.gameId == object.gameId else { return false }
      guard self.rank == object.rank else { return false }
      return true
    }

    public static func == (lhs: GameEnterpriseAdvert, rhs: GameEnterpriseAdvert) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
