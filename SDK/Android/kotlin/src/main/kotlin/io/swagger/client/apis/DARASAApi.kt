/**
 * DARASA
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.Badge
import io.swagger.client.models.CASA
import io.swagger.client.models.CASAAdvert
import io.swagger.client.models.Enterprise
import io.swagger.client.models.EnterpriseAdvert
import io.swagger.client.models.Game
import io.swagger.client.models.GameCompany
import io.swagger.client.models.GameEnterpriseAdvert
import io.swagger.client.models.GameEnterpriseAdvertAppearance
import io.swagger.client.models.User

import io.swagger.client.infrastructure.*

class DARASAApi(basePath: kotlin.String = "/") : ApiClient(basePath) {

    /**
     * 
     * 
     * @return kotlin.Array<Badge>
     */
    @Suppress("UNCHECKED_CAST")
    fun badgesGet(): kotlin.Array<Badge> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/badges"
        )
        val response = request<kotlin.Array<Badge>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Badge>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @return kotlin.Array<CASAAdvert>
     */
    @Suppress("UNCHECKED_CAST")
    fun casaAdvertsGet(): kotlin.Array<CASAAdvert> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/casaAdverts"
        )
        val response = request<kotlin.Array<CASAAdvert>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<CASAAdvert>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @return kotlin.Array<CASA>
     */
    @Suppress("UNCHECKED_CAST")
    fun casaGet(): kotlin.Array<CASA> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/casa"
        )
        val response = request<kotlin.Array<CASA>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<CASA>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @return kotlin.Array<EnterpriseAdvert>
     */
    @Suppress("UNCHECKED_CAST")
    fun enterpriseAdvertsGet(): kotlin.Array<EnterpriseAdvert> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/enterpriseAdverts"
        )
        val response = request<kotlin.Array<EnterpriseAdvert>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<EnterpriseAdvert>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @return kotlin.Array<Enterprise>
     */
    @Suppress("UNCHECKED_CAST")
    fun enterprisesGet(): kotlin.Array<Enterprise> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/enterprises"
        )
        val response = request<kotlin.Array<Enterprise>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Enterprise>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @return kotlin.Array<GameCompany>
     */
    @Suppress("UNCHECKED_CAST")
    fun gameCompaniesGet(): kotlin.Array<GameCompany> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/gameCompanies"
        )
        val response = request<kotlin.Array<GameCompany>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<GameCompany>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @return kotlin.Array<GameEnterpriseAdvertAppearance>
     */
    @Suppress("UNCHECKED_CAST")
    fun gameEnterpriseAdvertAppearancesGet(): kotlin.Array<GameEnterpriseAdvertAppearance> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/gameEnterpriseAdvertAppearances"
        )
        val response = request<kotlin.Array<GameEnterpriseAdvertAppearance>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<GameEnterpriseAdvertAppearance>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @return kotlin.Array<GameEnterpriseAdvert>
     */
    @Suppress("UNCHECKED_CAST")
    fun gameEnterpriseAdvertsGet(): kotlin.Array<GameEnterpriseAdvert> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/gameEnterpriseAdverts"
        )
        val response = request<kotlin.Array<GameEnterpriseAdvert>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<GameEnterpriseAdvert>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @return kotlin.Array<Game>
     */
    @Suppress("UNCHECKED_CAST")
    fun gamesGet(): kotlin.Array<Game> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/games"
        )
        val response = request<kotlin.Array<Game>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Game>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @return kotlin.Array<User>
     */
    @Suppress("UNCHECKED_CAST")
    fun usersGet(): kotlin.Array<User> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/users"
        )
        val response = request<kotlin.Array<User>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<User>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
